# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page, allows them to sign in
# or if they're signed in, it shows a listing of available games
# and a button to create a new game
GET     /                       controllers.Application.index(user: Option[String])

# Called by the login form in the navbar
# TODO Should really be replaced with use of the WebSocket
GET     /login                  controllers.Application.login(user: Option[String], password: Option[String])

# The page for a particular game, as seen by a particular user
GET     /game                   controllers.Application.game(user: Option[String], name: Option[String])

# User pressed button to create a new game instance
# It was going to be a PUT, but forms can only send GET and POST
GET     /create                 controllers.Application.create(user: Option[String], name: Option[String])

# User requested to join an existing game
GET     /join                   controllers.Application.join(user: Option[String], name: Option[String])

# URL of the WebSocket
# through which the squares-to-turn and moves-played are funnelled back and forth
GET     /game/socket            controllers.Application.gameSocket(user)

# Allow Javascript game to be 'reverse routed' into other view-templates
# must be before the /assets/*file route
GET     /assets/javascripts/squareGame.js   controllers.Application.squareGameJs

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file           controllers.Assets.at(path="/public", file)

# get resources like Bootstrap and jQuery from the web
# see webjars.org/documentation
GET     /webjars/*file          controllers.WebJarAssets.at(file)
